{"version":3,"sources":["gifs/6EA0E064-4DCD-41D8-93D9-5A14B437E639_4_5005_c.jpeg","gifs/9B584571-8956-41F2-9078-9EB122AFF51D_4_5005_c.jpeg","gifs/D7A9F136-8F39-4AB4-90D7-4B7FB3C8CF68_4_5005_c.jpeg","gifs/17DA3EE7-608C-499B-B8C9-E46410236148_4_5005_c.jpeg","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","class","App","state","clickedfriends","score","roundEnd","friends","gif","require","id","onClick","includes","console","log","push","friendSelected","temp","friendCount","length","Math","floor","random","setState","this","className","map","friend","key","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gMAAAA,EAAOC,QAAU,IAA0B,4E,gBCA3CD,EAAOC,QAAU,IAA0B,4E,gBCA3CD,EAAOC,QAAU,IAA0B,4E,gBCA3CD,EAAOC,QAAU,IAA0B,4E,+HCiB5BC,MAdf,WACG,OACH,4BAAQC,MAAO,UAEX,+CACC,6EC+EUC,E,2MAlFbC,MAAQ,CACNC,eAAgB,GAChBC,MAAO,EACPC,UAAU,EAEVC,QAAS,CACP,CACEC,IAAKC,EAAQ,IACbC,GAAI,GAGN,CACEF,IAAKC,EAAQ,IACbC,GAAI,GAGN,CACEF,IAAKC,EAAQ,IACbC,GAAI,GAEN,CACEF,IAAKC,EAAQ,IACbC,GAAI,K,EAKVC,QAAU,SAAAD,GAAO,IAAD,EAC2B,EAAKP,MAAxCC,EADQ,EACRA,eAAgBC,EADR,EACQA,MAAOE,EADf,EACeA,QACzBH,EAAeQ,SAASF,IAC1BG,QAAQC,IAAI,YACZD,QAAQC,IAAIT,GACZD,EAAiB,GACjBC,EAAQ,IAERQ,QAAQC,IAAIT,GACZQ,QAAQC,IAAI,WACZT,IACAD,EAAeW,KAAKL,IAOtB,IAJA,IACIM,EACAC,EAFAC,EAAcX,EAAQY,OAInBD,EAAc,GACnBF,EAAiBI,KAAKC,MAAMD,KAAKE,SAAWJ,GAE5CD,EAAOV,IADPW,GAEAX,EAAQW,GAAeX,EAAQS,GAC/BT,EAAQS,GAAkBC,EAG5B,EAAKM,SAAS,CACZnB,iBACAC,QACAE,a,wEAIM,IAAD,OAEP,OADAM,QAAQC,IAAIU,KAAKrB,OAEf,yBAAKsB,UAAU,OACb,kBAAC,EAAD,MAEA,yCAAeD,KAAKrB,MAAME,OAC1B,yBAAKoB,UAAU,eACZD,KAAKrB,MAAMI,QAAQmB,KAAI,SAAAC,GAAM,OAC5B,yBACEhB,QAAS,kBAAM,EAAKA,QAAQgB,EAAOjB,KACnCkB,IAAKD,EAAOjB,GACZmB,IAAKF,EAAOnB,IACZsB,IAAI,yB,GA1EAC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a0567cb9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/6EA0E064-4DCD-41D8-93D9-5A14B437E639_4_5005_c.e7925c76.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/9B584571-8956-41F2-9078-9EB122AFF51D_4_5005_c.f617ec3c.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/D7A9F136-8F39-4AB4-90D7-4B7FB3C8CF68_4_5005_c.c7ea2d1e.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/17DA3EE7-608C-499B-B8C9-E46410236148_4_5005_c.fcd28f03.jpeg\";","import React from 'react';\nimport \"../styles/Header.css\"\n\nfunction Header() {\n   return (\n<header class= \"header\">\n\n    <h1>Clicky Friends!</h1>\n     <p>Click all the friends no duplicates allowed!</p>\n\n</header>\n\n   )\n\n}\n\n\nexport default Header;","import React, { Component } from 'react';\nimport './friendstyles.css';\nimport Header from './components/Header';\n\nclass App extends Component {\n  state = {\n    clickedfriends: [],\n    score: 0,\n    roundEnd: false,\n\n    friends: [\n      {\n        gif: require('../src/gifs/6EA0E064-4DCD-41D8-93D9-5A14B437E639_4_5005_c.jpeg'),\n        id: 1\n      },\n\n      {\n        gif: require('../src/gifs/9B584571-8956-41F2-9078-9EB122AFF51D_4_5005_c.jpeg'),\n        id: 2\n      },\n\n      {\n        gif: require('../src/gifs/D7A9F136-8F39-4AB4-90D7-4B7FB3C8CF68_4_5005_c.jpeg'),\n        id: 3\n      },\n      {\n        gif: require('../src/gifs/17DA3EE7-608C-499B-B8C9-E46410236148_4_5005_c.jpeg'),\n        id: 4\n      }\n    ]\n  };\n\n  onClick = id => {\n    let { clickedfriends, score, friends } = this.state;\n    if (clickedfriends.includes(id)) {\n      console.log('you lost');\n      console.log(score);\n      clickedfriends = [];\n      score = 0;\n    } else {\n      console.log(score);\n      console.log('you win');\n      score++;\n      clickedfriends.push(id);\n    }\n\n    let friendCount = friends.length;\n    let friendSelected;\n    let temp;\n\n    while (friendCount > 0) {\n      friendSelected = Math.floor(Math.random() * friendCount);\n      friendCount--;\n      temp = friends[friendCount];\n      friends[friendCount] = friends[friendSelected];\n      friends[friendSelected] = temp;\n    }\n\n    this.setState({\n      clickedfriends,\n      score,\n      friends\n    });\n  };\n\n  render() {\n    console.log(this.state);\n    return (\n      <div className='App'>\n        <Header></Header>\n\n        <p>High Score:{this.state.score}</p>\n        <div className='friend-zone'>\n          {this.state.friends.map(friend => (\n            <img\n              onClick={() => this.onClick(friend.id)}\n              key={friend.id}\n              src={friend.gif}\n              alt='placeholder'\n            ></img>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}